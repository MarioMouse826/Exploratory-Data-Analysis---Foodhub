
# Importing libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('foodhub_order.csv')

# 1. Data Overview
print("Dataset Shape:", df.shape)
print("Dataset Info:")
print(df.info())
print("Missing Values:")
print(df.isnull().sum())

# 2. Unique Counts
print("Unique Order IDs:", df['order_id'].nunique())
print("Unique Customer IDs:", df['customer_id'].nunique())
print("Unique Restaurant Names:", df['restaurant_name'].nunique())

# 3. Cuisine Types Analysis
print("Unique Cuisine Types:", df['cuisine_type'].nunique())
plt.figure(figsize=(12, 6))
sns.countplot(data=df, y='cuisine_type', order=df['cuisine_type'].value_counts().index)
plt.title('Count of Orders by Cuisine Type')
plt.xlabel('Number of Orders')
plt.ylabel('Cuisine Type')
plt.show()

# 4. Cost of the Order
plt.figure(figsize=(12, 6))
sns.histplot(data=df, x='cost_of_the_order', kde=True, bins=30)
plt.title('Distribution of Order Costs')
plt.xlabel('Cost of the Order')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(data=df, x='cost_of_the_order')
plt.title('Boxplot of Order Costs')
plt.xlabel('Cost of the Order')
plt.show()

# 5. Day of the Week
print("Unique Days of the Week:", df['day_of_the_week'].unique())
plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='day_of_the_week', order=df['day_of_the_week'].value_counts().index)
plt.title('Count of Orders by Day of the Week')
plt.xlabel('Day of the Week')
plt.ylabel('Number of Orders')
plt.show()


# Univariate Analysis (Questions 6 to 11)

# 6. Ratings

print("Unique Ratings:", df['rating'].unique())
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='rating', order=df['rating'].value_counts().index)
plt.title('Count of Ratings')
plt.xlabel('Rating')
plt.ylabel('Count')
plt.show()

# 7. Food Preparation Time
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='food_preparation_time', kde=True, bins=20)
plt.title('Distribution of Food Preparation Time')
plt.xlabel('Food Preparation Time (minutes)')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='food_preparation_time')
plt.title('Boxplot of Food Preparation Time')
plt.xlabel('Food Preparation Time (minutes)')
plt.show()

# 8. Delivery Time
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='delivery_time', kde=True, bins=20)
plt.title('Distribution of Delivery Time')
plt.xlabel('Delivery Time (minutes)')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='delivery_time')
plt.title('Boxplot of Delivery Time')
plt.xlabel('Delivery Time (minutes)')
plt.show()

# 9. Top 5 Restaurants by Orders
top_5_restaurants = df['restaurant_name'].value_counts().head(5)
print("Top 5 Restaurants by Orders:")
print(top_5_restaurants)

# 10. Most Popular Cuisine on Weekends
df_weekend = df[df['day_of_the_week'] == 'Weekend']
most_popular_cuisine_weekend = df_weekend['cuisine_type'].value_counts().idxmax()
print("Most Popular Cuisine on Weekends:", most_popular_cuisine_weekend)

# 11. Percentage of Orders Costing More Than $20
df_greater_than_20 = df[df['cost_of_the_order'] > 20]
percentage_above_20 = (df_greater_than_20.shape[0] / df.shape[0]) * 100
print(f"Percentage of Orders Above $20: {round(percentage_above_20, 2)}%")


# 10. Mean Delivery Time
mean_delivery_time = df['delivery_time'].mean()
print(f"The mean delivery time for this dataset is {round(mean_delivery_time, 2)} minutes")

# 11. Top 5 Most Frequent Customers
top_5_customers = df['customer_id'].value_counts().head(5)
print("Top 5 Most Frequent Customers and Their Order Counts:")
print(top_5_customers)

# Multivariate Analysis (Questions 12 to 16)

# Cuisine vs Cost of Order
plt.figure(figsize=(15, 7))
sns.boxplot(x='cuisine_type', y='cost_of_the_order', data=df, palette='PuBu', hue='cuisine_type')
plt.title('Cuisine vs Cost of the Order')
plt.xticks(rotation=60)
plt.show()

# Cuisine vs Food Preparation Time
plt.figure(figsize=(15, 7))
sns.boxplot(x='cuisine_type', y='food_preparation_time', data=df, palette='Set3')
plt.title('Cuisine vs Food Preparation Time')
plt.xticks(rotation=60)
plt.show()

# Day of the Week vs Delivery Time
plt.figure(figsize=(15, 7))
sns.boxplot(x='day_of_the_week', y='delivery_time', data=df, palette='coolwarm')
plt.title('Day of the Week vs Delivery Time')
plt.show()

# Revenue Generated by Restaurants
restaurant_revenue = df.groupby(['restaurant_name'])['cost_of_the_order'].sum().sort_values(ascending=False).head(14)
print("Top 14 Restaurants by Revenue:")
print(restaurant_revenue)

# Rating vs Delivery Time
plt.figure(figsize=(15, 7))
sns.pointplot(x='rating', y='delivery_time', data=df)
plt.title('Rating vs Delivery Time')
plt.show()

# Rating vs Food Preparation Time
plt.figure(figsize=(15, 7))
sns.pointplot(x='rating', y='food_preparation_time', data=df)
plt.title('Rating vs Food Preparation Time')
plt.show()

# Rating vs Cost of the Order
plt.figure(figsize=(15, 7))
sns.pointplot(x='rating', y='cost_of_the_order', data=df)
plt.title('Rating vs Cost of the Order')
plt.show()

# Correlation among Variables
col_list = ['cost_of_the_order', 'food_preparation_time', 'delivery_time']
plt.figure(figsize=(15, 7))
sns.heatmap(df[col_list].corr(), annot=True, vmin=-1, vmax=1, fmt=".2f", cmap="Spectral")
plt.title('Correlation Among Variables')
plt.show()

# Question 13: Restaurants Eligible for Promotional Offers
df_rated = df[df['rating'] != 'Not given'].copy()
df_rated['rating'] = df_rated['rating'].astype('int')
df_rating_count = df_rated.groupby('restaurant_name')['rating'].count().reset_index(name='rating_count')
rest_names = df_rating_count[df_rating_count['rating_count'] > 50]['restaurant_name']
df_mean_4 = df_rated[df_rated['restaurant_name'].isin(rest_names)].copy()
df_mean_4_rating = df_mean_4.groupby('restaurant_name')['rating'].mean().reset_index(name='mean_rating')
df_avg_rating_greater_than_4 = df_mean_4_rating[df_mean_4_rating['mean_rating'] > 4].sort_values(by='mean_rating', ascending=False).reset_index(drop=True)
print("Restaurants Eligible for Promotional Offers:")
print(df_avg_rating_greater_than_4)

# Question 14: Calculate Net Revenue
def compute_rev(x):
    if x > 20:
        return x * 0.25
    elif x > 5:
        return x * 0.15
    else:
        return 0

df['Revenue'] = df['cost_of_the_order'].apply(compute_rev)
total_rev = df['Revenue'].sum()
print(f"Net Revenue Generated by the Company: ${round(total_rev, 2)}")

# Question 15: Percentage of Orders with Total Time > 60 Minutes
df['total_time'] = df['food_preparation_time'] + df['delivery_time']
percentage_above_60 = (df[df['total_time'] > 60].shape[0] / df.shape[0]) * 100
print(f"Percentage of Orders with Total Time > 60 Minutes: {round(percentage_above_60, 2)}%")

# Question 16: Mean Delivery Time During Weekdays and Weekends
mean_delivery_weekday = df[df['day_of_the_week'] == 'Weekday']['delivery_time'].mean()
mean_delivery_weekend = df[df['day_of_the_week'] == 'Weekend']['delivery_time'].mean()
print(f"Mean Delivery Time on Weekdays: {round(mean_delivery_weekday, 2)} minutes")
print(f"Mean Delivery Time on Weekends: {round(mean_delivery_weekend, 2)} minutes")
